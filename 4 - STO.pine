// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© stmd

// @version=4

//-------------------------------------

// Release:                     2020-08-04
// Author:                      stmd
// Email:                       pine@stmd.nl
// Profile:                     https://www.tradingview.com/u/stmd/

//-------------------------------------
// PURPOSE
//

//-------------------------------------
// FEATURES
//

//-------------------------------------
// NOTES
//

//-------------------------------------
// INDICATOR PARAMETERS

vVersion                        = "V1.1"
vTitle                          = "Stochastic"
vShort                          = "STO"
vOverlay                        = false
vScale                          = scale.right
vPrecision                      = 0

study( title = vTitle+" ["+vVersion+"]", shorttitle = vShort, overlay = vOverlay, precision = vPrecision, resolution = "" )

//-------------------------------------
// INPUTS

vSource                         = input( defval = close, type = input.source, title = "Source" )
vKLength                        = input( defval = 14, minval = 1, maxval = 1024, title = "%K - Length" )
vDLength                        = input( defval = 3, minval = 1, maxval = 1024, title = "%D - Length" )
vKSmooth                        = input( defval = 3, minval = 1, maxval = 1024, title = "%K - Smooth" )
vDSmooth                        = input( defval = 3, minval = 1, maxval = 1024, title = "%D - Smooth" )
vOffSet                         = input( defval = 0, minval = 0, maxval = 1024, title = "Offset" )

//-------------------------------------
// FUNCTIONS

fMa( n, s, le ) =>
    r = float( 0 )
    for i = n + 0 to ( n + ( le - 1 ) )
        r := ( r + s[ i ] )
    a = r / le

fStoK( n, s, kl, dl ) =>
    r = float( 0 )
    r := ( ( s[ n ] - lowest( low[ n ], kl ) ) / ( highest( high[ n ], kl ) - lowest( low[ n ], kl ) ) * 100 )

fStoD( n, s, kl, dl ) =>
    r = float( 0 )
    r := ( fMa( 0, ( s[ n ] - lowest( low[ n ], kl ) ) / ( highest( high[ n ], kl ) - lowest( low[ n ], kl ) ), dl ) * 100 )

//-------------------------------------
// COLORS

fColorK( n, k, d ) =>
    r = ( k[ n ] > d[ n ] ) ? #26A69A : #EF5350
    r

fColorD( n, s ) =>
    r = ( s[ n + 1 ] < s[ n ] ) ?  #999999 :  #999999
    r

//-------------------------------------
// PLOT

vUpperBand                      = hline( 80, color = color.black, title = "STO - Upper Band" )
vLowerBand                      = hline( 20, color = color.black, title = "STO - Lower Band" )

vStoK                           = fMa( 0, fStoK( vOffSet, vSource, vKLength, vDLength ), vKSmooth )
vStoD                           = fMa( 0, fStoD( vOffSet, vSource, vKLength, vDLength ), vDSmooth )

vPlotStoK                       = plot( vStoK, style = plot.style_line, color = fColorK( 0, vStoK, vStoD ), title = "STO %K" )
vPlotStoD                       = plot( vStoD, style = plot.style_line, color = fColorD( 0, vStoD ), title = "STO %D" )

//-------------------------------------