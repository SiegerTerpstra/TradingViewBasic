// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© stmd

// @version=4

//-------------------------------------

// Release:                     2020-08-04
// Author:                      stmd
// Email:                       pine@stmd.nl
// Profile:                     https://www.tradingview.com/u/stmd/

//-------------------------------------
// PURPOSE
//

//-------------------------------------
// FEATURES
//

//-------------------------------------
// NOTES
//

//-------------------------------------
// INDICATOR PARAMETERS

vVersion                        = "V1.1"
vTitle                          = "Relative Strength Index"
vShort                          = "RSI"
vOverlay                        = false
vScale                          = scale.right
vPrecision                      = 0

study( title = vTitle+" ["+vVersion+"]", shorttitle = vShort, overlay = vOverlay, precision = vPrecision, resolution = "" )

//-------------------------------------
// INPUTS


vSource                         = input( defval = close, type = input.source, title = "Source" )
vLength                         = input( defval = 14, minval = 1, maxval = 1024, title = "Length" )
vSmooth                         = input( defval = 1, minval = 1, maxval = 1024, title = "Smooth" )
vOffSet                         = input( defval = 0, minval = 0, maxval = 1024, title = "Offset" )

//-------------------------------------
// FUNCTIONS

fMaxUpDown( n, s, t ) =>
    r = ( t == 'up' ) ? max( s[ n ] - s[ n + 1 ], 0 ) : max( s[ n + 1 ] - s[ n ], 0 )
    r

fMa( n, s, le ) =>
    r = float( 0 )
    for i = n + 0 to ( n + ( le - 1 ) )
        r := ( r + s[ i ] )
    a = r / le

fRma( n, s, le ) =>
    ma = fMa( n, s, le )
    r = float( 0 )
    r := ( na( r[ 1 ] ) ? ma : ( ( r[ 1 ] * ( le - 1 ) ) + s[ n ] ) / le )

fRsi( n, le, s ) =>
    r = float( 0 )
    r := ( 100 - ( 100 / ( 1 + ( fRma( n, fMaxUpDown( n, s[ n ], 'up' ), le ) / fRma( n, fMaxUpDown( n, s[ n ], 'down' ), le ) ) ) ) )

//-------------------------------------
// COLORS

fColorRsi( n, s ) =>
    r = ( s[ n + 1 ] < s[ n ] ) ? #26A69A : #EF5350
    r

//-------------------------------------
// PLOT

vUpperBand                      = hline( 70, color = #C0C0C0, linestyle = hline.style_dashed, linewidth = 1, title = "Upper Band", editable = true )
vLowerBand                      = hline( 30, color = #C0C0C0, linestyle = hline.style_dashed, linewidth = 1, title = "Lower Band", editable = true )

vRsi                            = fMa( 0, fRsi( vOffSet, vLength, vSource ), vSmooth )
vPlotRsi                        = plot( vRsi[ 0 ], style = plot.style_line, color = fColorRsi( 0, vRsi ), title = "RSI" )

//-------------------------------------