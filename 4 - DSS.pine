// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© stmd

// @version=4

//-------------------------------------

// Release:                     2020-08-05
// Author:                      stmd
// Email:                       pine@stmd.nl
// Profile:                     https://www.tradingview.com/u/stmd/

//-------------------------------------
// PURPOSE
//

//-------------------------------------
// FEATURES
//

//-------------------------------------
// NOTES
//

//-------------------------------------
// INDICATOR PARAMETERS

vVersion                        = "V1.1"
vTitle                          = "Double Smoothed Stochastic"
vShort                          = "DSS"
vOverlay                        = false
vScale                          = scale.right
vPrecision                      = 0

study( title = vTitle+" ["+vVersion+"]", shorttitle = vShort, overlay = vOverlay, precision = vPrecision, resolution="" )

//-------------------------------------
// INPUTS

vSource                         = input( defval = close, type = input.source, title = "Source" )
vLengthFast                     = input( defval = 3, minval = 1, maxval = 1024, title = "Fast Length" )
vLengthSlow                     = input( defval = 9, minval = 1, maxval = 1024, title = "Slow Length" )
vSmooth                         = input( defval = 1, minval = 1, maxval = 1024, title = "Smooth" )
vOffSet                         = input( defval = 0, minval = 0, maxval = 1024, title = "Offset" )

//-------------------------------------
// FUNCTIONS

fMa( n, s, le ) =>
    r = float( 0 )
    for i = n + 0 to ( n + ( le - 1 ) )
        r := ( r + s[ i ] )
    a = r / le

fEma( n, s, le ) =>
    ma = fMa( n, s, le )
    r = float( 0 )
    r := ( na( r[ 1 ] ) ? ma : ( r[ 1 ] + ( 2 / ( le + 1 ) ) * ( s[ n ] - r[ 1 ] ) ) )

fDss( n, s, ls, lf ) =>
    ratio = ( fEma( 0, s[ n ], lf ) / fEma( 0, s[ n ], ls ) )
	diffr = ( highest( ratio, ls ) - lowest( ratio, ls ) )
	average = ( fEma( 0, ( ( ratio - lowest( ratio , ls ) ) / diffr ), lf ) * 100 )
	diffa = ( highest( average, ls ) - lowest( average, ls ) )
	dss = ( fEma( 0, ( ( average - lowest( average, ls ) ) / diffa ), lf ) * 100 )
    r = dss

//-------------------------------------
// COLORS

fColor( n, s ) =>
    r = ( s[ n + 1 ] < s[ n ] ) ? #26A69A : #EF5350
    r

//-------------------------------------
// PLOT

vUpperBand                      = hline( 90, color = #666666, linestyle = hline.style_dashed, linewidth = 1, title = "Upper Band", editable = true )
vLowerBand                      = hline( 10, color = #666666, linestyle = hline.style_dashed, linewidth = 1, title = "Lower Band", editable = true )

vDss                            = fMa( 0, fDss( vOffSet, vSource, vLengthSlow, vLengthFast ), vSmooth )
vPlotDss                        = plot( vDss, style = plot.style_line, color = fColor( 0, vDss ), title = "DSS" )

//-------------------------------------